<?php

/**
 * @file
 * Provides functionality for creating/managing/deleting/viewing collections.
 */

define('CREATE_CHILD_COLLECTION', 'create child collection');
define('MANAGE_COLLECTION_POLICY', 'manage collection policy');
define('MANAGE_CONTENT_MODEL_ASSOCIATION', 'manage content model association');
define('MIGRATE_COLLECTION_MEMBERS', 'migrate collection members');

/**
 * Implements hook_menu().
 *
 * We need some standard entry points so we can have consistent urls for
 * different Object actions
 */
function islandora_basic_collection_menu() {
  $items = array();

  $items['islandora/object/%islandora_object/manage/collection/ingest'] = array(
    'title' => 'Add an object to this Collection',
    'page callback' => 'islandora_basic_collection_ingest_action',
    'page arguments' => array(2),
    'type' => MENU_LOCAL_ACTION,
    'access callback' => 'islandora_basic_collection_ingest_access',
    'access arguments' => array(2),
  );

  $items['islandora/object/%islandora_object/manage/collection/child'] = array(
    'title' => 'Add a child collection to this collection',
    'page callback' => 'islandora_collection_management_wrapper',
    'page arguments' => array('new collection', 2),
    'type' => MENU_LOCAL_ACTION,
    'access callback' => 'user_access',
    'access arguments' => array(CREATE_CHILD_COLLECTION),
  );

  $items['admin/islandora/basic_collection'] = array(
    'title' => 'Core collection',
    'description' => 'Configure the core Islandora collection functionality.',
    'page callback' => 'drupal_get_form',
    'access arguments' => array('administer site configuration'),
    'page arguments' => array('islandora_basic_collection_admin'),
    'file' => 'includes/admin.form.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['islandora/object/%islandora_object/manage/collection'] = array(
    'title' => 'Collection',
    'page callback' => 'islandora_basic_collection_manager_object',
    'page arguments' => array(2),
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'islandora_basic_collection_access',
    'access arguments' => array(2),
  );

  $items['admin/islandora/collection/management'] = array(
    'title' => 'Collection Management',
    'page callback' => 'islandora_collection_management_wrapper',
    'type' => MENU_LOCAL_TASK,
    'access arguments' => array('administer site configuration'),
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function islandora_basic_collection_menu_alter(&$items) {
  // We want to add more permissions to the access arguments for the manage tab.
  $current_access_arguments = $items['islandora/object/%islandora_object/manage']['access arguments'][0];
  $new_access_arguments = array(
    CREATE_CHILD_COLLECTION,
    MANAGE_COLLECTION_POLICY,
    MANAGE_CONTENT_MODEL_ASSOCIATION,
    MIGRATE_COLLECTION_MEMBERS,
  );
  $new_access_arguments = array_merge($current_access_arguments, $new_access_arguments);
  $items['islandora/object/%islandora_object/manage']['access arguments'] = array($new_access_arguments,2);
}

/**
 * Implements hook_islandora_required_objects().
 */
function islandora_basic_collection_islandora_required_objects(IslandoraTuque $connection) {
  $module_path = drupal_get_path('module', 'islandora_basic_collection');
  // Collection Content Model.
  $collection_content_model = $connection->repository->constructObject('islandora:collectionCModel');
  $collection_content_model->owner = 'fedoraAdmin';
  $collection_content_model->label = 'Islandora Collection Content Model';
  $collection_content_model->models = 'fedora-system:ContentModel-3.0';
  // ISLANDORACM Datastream.
  $datastream = $collection_content_model->constructDatastream('ISLANDORACM', 'X');
  $datastream->label = 'Islandora content model';
  $datastream->mimetype = 'text/xml';
  $datastream->setContentFromFile("$module_path/xml/islandora_basic_collection_content_model.xml", FALSE);
  $collection_content_model->ingestDatastream($datastream);
  // DS-COMPOSITE-MODEL Datastream.
  $datastream = $collection_content_model->constructDatastream('DS-COMPOSITE-MODEL', 'X');
  $datastream->label = 'DS-COMPOSITE-MODEL';
  $datastream->mimetype = 'text/xml';
  $datastream->setContentFromFile("$module_path/xml/islandora_basic_collection_ds_composite_model.xml", FALSE);
  $collection_content_model->ingestDatastream($datastream);
  return array(
    'islandora_basic_collection' => array(
      'title' => 'Islandora basic collection',
      'objects' => array(
        $collection_content_model,
      ),
    ),
  );
}

/**
 * Determine whether or not to show this modules manage tab.
 *
 * @param FedoraObject $object
 *   The object being managed.
 *
 * @return bool
 *   TRUE if it should be shown, and FALSE if it should not be shown.
 */
function islandora_basic_collection_access($object = NULL) {
  if (!isset($object)) {
    return FALSE;
  }
  $access = user_access(CREATE_CHILD_COLLECTION) ||
      user_access(MANAGE_COLLECTION_POLICY) ||
      user_access(MANAGE_CONTENT_MODEL_ASSOCIATION) ||
      user_access(MIGRATE_COLLECTION_MEMBERS) ||
      islandora_basic_collection_ingest_access($object);

  // The user is allowed to manage, and the object has our content model.
  return $access && in_array('islandora:collectionCModel', $object->models);
}

/**
 * Ingest action access callback.
 *
 * @param FedoraObject $object
 *   Collection object to check if ingestion is possible.
 */
function islandora_basic_collection_ingest_access($object = NULL) {
  if (!is_object($object) || !user_access(FEDORA_INGEST)) {
    return FALSE;
  }
  // Reduce need to validate to once per object, as this if often called more
  // than once per request.
  static $checked_objects = array();
  if (!in_array($object->id, array_keys($checked_objects))) {
    module_load_include('inc', 'islandora', 'includes/ingest.form');
    // Assume ingest is denied.
    $checked_objects[$object->id] = FALSE;
    $configuration = islandora_basic_collection_get_ingest_configuration($object);
    if ($configuration) {
      $steps = islandora_ingest_get_approximate_steps($configuration);
      // Only if one or more steps are defined should we ingest.
      $checked_objects[$object->id] = count($steps) > 0;
    }
  }
  return $checked_objects[$object->id];
}

/**
 * Implements hook_theme().
 */
function islandora_basic_collection_theme($existing, $type, $theme, $path) {
  return array(
    'islandora_basic_collection' => array(
      'file' => 'theme/theme.inc',
      'template' => 'theme/islandora-basic-collection',
      'pattern' => 'islandora_basic_collection__',
      'variables' => array('islandora_object' => NULL),
    ),
    'islandora_basic_collection_grid' => array(
      'file' => 'theme/theme.inc',
      'template' => 'theme/islandora-basic-collection-grid',
      'pattern' => 'islandora_basic_collection_grid__',
      'variables' => array('islandora_object' => NULL, 'collection_results' => NULL),
    ),
    'islandora_basic_collection_wrapper' => array(
      'file' => 'theme/theme.inc',
      'template' => 'theme/islandora-basic-collection-wrapper',
      'variables' => array('islandora_object' => NULL),
    ),
    'islandora_collection_policy_table' => array(
      'file' => 'includes/collection_policy_management.inc',
      'render element' => 'form',
    ),
  );
}

/**
 * Implements hook_CMODEL_PID_islandora_view_object().
 */
function islandora_basic_collection_islandora_collectionCModel_islandora_view_object(FedoraObject $object) {
  $output = theme('islandora_basic_collection_wrapper', array(
        'islandora_object' => $object,
      ));
  return array('Collection View' => $output);
}

/**
 * Get objects associated with this object.
 *
 * Currently, we are only concerned with the with isMemberOf and
 * isMemberOfCollection relationships.
 *
 * @param FedoraObject $object
 *   The collection object whose members will be fetched.
 * @param int $page_number
 *   The page number in the query for members.
 * @param int $page_size
 *   The number of results per page page from the query for members.
 *
 * @return array
 *   Query results.
 */
function islandora_basic_collection_get_objects(FedoraObject $object, $page_number = 1, $page_size = 5) {
  module_load_include('inc', 'islandora', 'includes/utilities');
  $query = 'SELECT $object $title $content
     FROM <#ri>
     WHERE {
            $object $collection_predicate <info:fedora/' . $object->id . '> ;
                   <fedora-model:label> $title ;
                   <fedora-model:hasModel> $content ;
                   <fedora-model:state> <fedora-model:Active> .
            FILTER(sameTerm($collection_predicate, <fedora-rels-ext:isMemberOfCollection>) || sameTerm($collection_predicate, <fedora-rels-ext:isMemberOf>))
            FILTER (!sameTerm($content, <info:fedora/fedora-system:FedoraObject-3.0>))';
  $enforced = variable_get('islandora_namespace_restriction_enforced', FALSE);
  if ($enforced) {
    $namespace_array = explode(' ', variable_get('islandora_pids_allowed', 'default: demo: changeme: ilives: islandora-book: books: newspapers: '));
    $namespace_array = array_map('islandora_get_namespace', $namespace_array);
    $namespace_array = array_filter($namespace_array, 'trim');
    $namespace_sparql = implode('|', $namespace_array);
    $query .= 'FILTER(regex(str(?object), "info:fedora/(' . $namespace_sparql . '):"))';
  }
  $query .= '} ORDER BY $title';
  $query_array = array(
    'query' => $query,
    'type' => 'sparql',
    'pid' => $object->id,
    'page_size' => $page_size,
    'page_number' => $page_number,
  );
  drupal_alter('islandora_basic_collection_query', $query_array);
  try {
    $results = $object->repository->ri->query($query_array['query'], $query_array['type']);
  }
  catch (Exception $e) {
    drupal_set_message(t('Islandora Error getting related objects for %s', array('%s' => $object->id)), 'error');
    return array();
  }
  return $results;
}

/**
 * Implements hook_islandora_undeletable_datastreams().
 */
function islandora_basic_collection_islandora_undeletable_datastreams($models) {
  if (in_array('islandora:collectionCModel', $models)) {
    if (variable_get('islandora_basic_collection_disable_collection_policy_delete', TRUE)) {
      return array('COLLECTION_POLICY');
    }
  }
}

/**
 * Implements hook_permission().
 */
function islandora_basic_collection_permission() {
  return array(
    CREATE_CHILD_COLLECTION => array(
      'title' => t('Create child collections'),
      'description' => t('Create new collections within an existing collection.'),
    ),
    MANAGE_COLLECTION_POLICY => array(
      'title' => t('Manage collection policies'),
      'description' => t('Define which content models are available for each collection.'),
    ),
    MANAGE_CONTENT_MODEL_ASSOCIATION => array(
      'title' => t('Manage content model associations'),
      'description' => t('Change content models for objects within a collection.'),
    ),
    MIGRATE_COLLECTION_MEMBERS => array(
      'title' => t('Migrate collection members'),
      'description' => t('Move objects from one collection to another.'),
    ),
  );
}

/**
 * Manage action that for ingestion of an object into the given collection.
 *
 * @param FedoraObject $object
 *   The collection to ingest into.
 *
 * @return array
 *   The ingest form.
 */
function islandora_basic_collection_ingest_action(FedoraObject $object) {
  if (($configuration = islandora_basic_collection_get_ingest_configuration($object)) !== FALSE) {
    module_load_include('inc', 'islandora', 'includes/ingest.form');
    return drupal_get_form('islandora_ingest_form', $configuration);
  }
  drupal_not_found();
}

/**
 * Generates an ingest configuration from the given collection object.
 *
 * @see islandora_ingest_form
 *
 * @param FedoraObject $object
 *   A collection object to generate the configuration from.
 *
 * @return array
 *   An ingest configuration array as defined by islandora_ingest_form() if
 *   possible FALSE otherwise.
 */
function islandora_basic_collection_get_ingest_configuration(FedoraObject $object) {
  if (in_array('islandora:collectionCModel', $object->models) && isset($object['COLLECTION_POLICY'])) {
    $policy = new CollectionPolicy($object['COLLECTION_POLICY']->content);
    return array(
      'collections' => array($object->id),
      'models' => array_keys($policy->getContentModels()),
    );
  }
  return FALSE;
}

/**
 * Alter the ingest form to handle a change in the selected content model.
 *
 * The collection needs to add some additional  information to the ingest object
 * based on what form association was used to select the metadata form. Namely
 * it needs to provide a default namespace, and collection to be ingested into.
 * To do this it appends its own submit handler on to the metadata step.
 *
 * @param array $form
 *   The Drupal form.
 * @param array $form_state
 *   The Drupal form state.
 * @param string $form_id
 *   The islandora_ingest_form form id.
 */
function islandora_basic_collection_form_islandora_ingest_form_alter(array &$form, array &$form_state, $form_id) {
  $shared_storage = islandora_ingest_form_get_shared_storage($form_state);
  if (isset($shared_storage['collections'])) {
    $step = islandora_ingest_form_get_step($form_state);
    $metadata_form_step = isset($step['form_id']) && $step['form_id'] == 'xml_form_builder_ingest_form';
    $submit_handler_already_added = in_array('islandora_basic_collection_ingest_form_submit', $form['next']['#submit']);
    if ($metadata_form_step && !$submit_handler_already_added) {
      array_unshift($form['next']['#submit'], 'islandora_basic_collection_ingest_form_submit');
    }
  }
}

/**
 * Set the default namespace.
 *
 * @param array $form
 *   The Drupal form.
 * @param array $form_state
 *   The Drupal form state.
 */
function islandora_basic_collection_ingest_form_submit(array $form, array &$form_state) {
  $shared_storage = islandora_ingest_form_get_shared_storage($form_state);
  // Only support 1 for now.
  $collection_id = current($shared_storage['collections']);
  // Only support 1 for now.
  $object = islandora_ingest_form_get_object($form_state);
  if (!isset($object->id)) {
    module_load_include('inc', 'islandora', 'includes/utilities');
    $collection_object = islandora_object_load($collection_id);
    $policy = new CollectionPolicy($collection_object['COLLECTION_POLICY']->content);
    $models = $policy->getContentModels();
    $association_step_storage = islandora_ingest_form_get_step_storage($form_state, 'xml_form_builder_association_step');
    $association = $association_step_storage['association'];
    // Get the form association's content model.
    $model = $association['content_model'];
    $model = $models[$model];
    $namespace = islandora_get_namespace($model['namespace']);
    $object->id = $object->repository->api->m->getNextPid($namespace);
  }
}

/**
 * Manage Collection local task.
 *
 * Defines the actions to appear in the collection section of the Manage tab.
 *
 * @param FedoraObject $object
 *   The collection object.
 *
 * @return array
 *   A renderable array.
 */
function islandora_basic_collection_manager_object(FedoraObject $object) {
  $pid = $object->id;
  $url_stub = 'admin/islandora/collection/management';
  $list = array();
  if (user_access(MANAGE_COLLECTION_POLICY)) {
    $list[] = l(t('Manage collection policy'), "$url_stub/collection policy/$pid");
  }
  if (user_access(MIGRATE_COLLECTION_MEMBERS)) {
    $list[] = l(t('Manage collection membership'), "$url_stub/migrate/$pid");
  }
  $list[] = l(t('Change content models'), "$url_stub/change content model/$pid");
  if (user_access(FEDORA_PURGE)) {
    $list[] = l(t('Delete members of this collection'), "$url_stub/delete/$pid");
  }
  $extras = module_invoke_all('islandora_collection_mangement', $pid);
  foreach ($extras as $extra) {
    $list[] = $extra;
  }

  $variables = array(
    'items' => $list,
    'title' => NULL,
    'type' => 'ul',
    'attributes' => array('class' => 'items'),
  );
  $content = theme_item_list($variables);
  $form = array();

  $form['collection_policy_link'] = array(
    '#markup' => $content,
  );

  return $form;
}

/**
 * Wraps all management functions to direct user to file page.
 *
 * @global string $base_url
 *
 * @param string $function
 *   Management function name.
 * @param string $pid
 *   The collection object.
 *
 * @return array
 *   A Drupal form definition.
 */
function islandora_collection_management_wrapper($function = NULL, $pid = NULL) {
  // Added to provide pathing if called from admin menu.
  if ($function == NULL) {
    global $base_url;
    $failure_message = t('This menu is not applicable in this context.') . '<br />' .
        t("To manage any given collection navigate to that collection's Manage tab, and select Collection");
    $path = $_SERVER['HTTP_REFERER'];
    if (!$path) {
      return $failure_message;
    }
    $path = str_replace($base_url . '/islandora/object/', '', $path);
    $path_parts = explode('/', $path);
    $pid = $path_parts[0];
    if (!$pid) {
      return $failure_message;
    }
    drupal_goto("islandora/object/$pid/manage/collection");
  }

  global $base_url;
  $overlay = "#overlay=islandora/object/$pid/manage/collection";
  $url = $base_url . "/islandora/object/$pid" . $overlay;
  module_load_include('inc', 'islandora_basic_collection', 'includes/collection_management');
  module_load_include('inc', 'islandora_basic_collection', 'includes/collection_manager_table');
  module_load_include('inc', 'islandora_basic_collection', 'includes/delete_collection');
  module_load_include('inc', 'islandora_basic_collection', 'includes/move_collection');
  module_load_include('inc', 'islandora_basic_collection', 'includes/child_collection');
  module_load_include('inc', 'islandora_basic_collection', 'includes/manage_policies');
  module_load_include('inc', 'islandora_basic_collection', 'includes/change_content_models');
  module_load_include('inc', 'islandora_basic_collection', 'includes/collection_policy_management');
  $mappings = array(
    'new collection' => 'islandora_create_child_collection_form',
    'collection policy' => 'collection_policy_management',
    'migrate' => 'islandora_collection_migrate_form',
    'change content model' => 'islandora_change_content_models_form',
    'delete' => 'islandora_collection_deletion_form',
  );
  $object = islandora_object_load($pid);
  $form = drupal_get_form($mappings[$function], $object, $url);
  return $form;
}
